#!/bin/bash -e
# Run a program in a development environment.

PROJECT_ROOT=$(readlink -f $(dirname $0)/..)
PROJECT_NAME=$(basename "${PROJECT_ROOT}")
DOCKER_ROOT=$(readlink -f $(dirname $0)/docker)

DEVENV_REPO=https://github.com/tgockel/dev-env.git
DEVENV_REPO_RAW=https://raw.githubusercontent.com/tgockel/dev-env
DEVENV_BASED_ON=v0.1.0

########################################################################################################################
# Functions                                                                                                            #
########################################################################################################################

function fatal_error {
  >&2 echo "$@"
  exit 1
}

function run {
  PROG=$1
  hash "${PROG}" 2>/dev/null || fatal_error "Required program not installed: ${PROG}"

  shift
  "${PROG}" "$@"
}

# Get the default distribution file. If there is a dev-env-settings.json and the path '.default_distro' exists, then
# that value will be used. If it does not exist, then the distro which is lexicographically largest will be used.
function default_distro {
  # If there is a settings file, use jq
  CONFIG_JSON_FILE=$(readlink -f $(dirname $0)/dev-env-settings.json)
  if [[ -e "${CONFIG_JSON_FILE}" ]]; then
    JSON_DEFAULT=$(run jq -r '.default_distro' "${CONFIG_JSON_FILE}")
    if [[ "${JSON_DEFAULT}" != "null" ]]; then
      echo "${JSON_DEFAULT}"
      return
    fi
  fi

  # Guess that the distro people want is the lexicographically-largest
  echo $(for dfile in $(ls ${DOCKER_ROOT}/*/Dockerfile); do basename $(dirname "$dfile"); done | sort -r | head -1)
}

# Get the latest version tag of the dev-env script.
function upgrade_dev_env_get_latest_version_tag {
  BEST_VERSION=$(run git ls-remote --exit-code --tags --refs "${DEVENV_REPO}" \
                | cut --delimiter=/ --fields=3                                \
                | sort -V                                                     \
                | tail -1                                                     \
                )
  if [[ -z "${BEST_VERSION}" ]]; then
    fatal_error "Error getting latest version -- could not get any tags from ${DEVENV_REPO}"
  fi

  echo "${BEST_VERSION}"
}

# Fetch a specific version of the dev-env script.
#
# Args:
#  $1: The version to fetch
function upgrade_dev_env_fetch_script {
  if [[ $# -ne 1 ]]; then
    fatal_error "upgrade_dev_env_fetch_script must be called with exactly 1 argument"
  fi

  VERSION_TAG=$1
  FETCH_URL="${DEVENV_REPO_RAW}/${VERSION_TAG}/dev-env"

  run curl --fail "${FETCH_URL}" || fatal_error "Failed to fetch ${FETCH_URL}"
}

# Run the 3-way merge tool.
#
# Args:
#  $1: The base version this file was based on (the DEVENV_BASED_ON version)
#  $2: The path of the file to upgrade (this file)
#  $3: The newest version to update to (from upgrade_dev_env_fetch_script)
#  $4: Temporary output path
function upgrade_dev_env_merge {
  if [[ $# -ne 4 ]]; then
    fatal_error "upgrade_dev_env_merge must be called with exactly 4 arguments -- {base} {file} {upstream} {output}"
  fi

  BASE="$1"
  CURRENT="$2"
  UPSTREAM="$3"
  OUTPUT="$4"

  MERGE_TOOL=$(run git config merge.tool || echo diff3)
  if [[ "${MERGE_TOOL}" == "kdiff3" ]]; then
    run ${MERGE_TOOL} --merge --auto "${BASE}" "${CURRENT}" "${UPSTREAM}" -o "${OUTPUT}"
  else
    # Assume diff3-like use
    run ${MERGE_TOOL} --merge "${CURRENT}" "${BASE}" "${UPSTREAM}" > "${OUTPUT}"
  fi

  mv "${OUTPUT}" "${CURRENT}"
}

########################################################################################################################
# Program Options                                                                                                      #
########################################################################################################################

COMMAND=(bash -l)
OPT_BUILD=1
OPT_DISTRO=
OPT_IMAGE=
OPT_FOLDER=$(basename ${PROJECT_ROOT})
OPT_RM=1
OPT_RUN=1
OPT_TTY=1
OPT_UPGRADE_DEVENV=0
OPT_UPGRADE_DEVENV_VERSION_TAG=
OPTS_VALID=1

[[ "${EUID}" -eq 0 ]] && OPT_MAP_USER=0 || OPT_MAP_USER=1

function show_usage {
  echo "$0: Run a program in a Docker environment."
  echo ""
  echo "Common options:"
  echo ""
  echo "  --distro DISTRO"
  echo "        The Linux distro to use (default: $(default_distro))"
  echo ""
  echo "        Available options:"
  printf "         "
  printf " %s" $(ls $(dirname $0)/docker)
  echo ""
  echo "  --keep"
  echo "  --no-keep"
  echo "        By default, the container is automatically deleted when the script"
  echo "        exits. Specify --keep to prevent this."
  echo ""
  echo "  --tty"
  echo "  --no-tty"
  echo "        By default, a pseudo-TTY is created for interacting with the container."
  echo "        Use --no-tty to disable this when you wish to pipe from stdout of the"
  echo "        container to stdin of some other program."
  echo ""
  echo "  --"
  echo "        Stop processing arguments and pass the remaining arguments to the"
  echo "        container."
  echo ""
  echo "Uncommon options:"
  echo ""
  echo "  --build"
  echo "  --no-build"
  echo "        By default, 'docker build' is always run to build the container from"
  echo "        sources. This is usually fast due to Docker build caching. Use"
  echo "        --no-build to disable the attempt to build."
  echo ""
  echo "  --folder-name NAME"
  echo "        The name of the folder to create inside the container."
  echo ""
  echo "  --image IMAGE"
  echo "        The name of the Docker image to build or run. By default, this is"
  echo "        \"${PROJECT_NAME}/\${DISTRO}/dev\"."
  echo ""
  echo "  --map-user"
  echo "  --no-map-user"
  echo "        If set, map the user and group IDs inside the container to the same"
  echo "        values outside of the container. This allows saving files inside the"
  echo "        container without having to muck with permssions. This is enabled by"
  echo "        default if running as non-root user."
  echo ""
  echo "  --run"
  echo "  --no-run"
  echo "        If --no-run is specified, the container will be built only."
  echo ""
  echo "  --upgrade-dev-env"
  echo "  --upgrade-dev-env-to VERSION"
  echo "        Upgrade this script to the latest or a specific {VERSION}."
}

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    --build)
      OPT_BUILD=1
      shift
      ;;
    --no-build)
      OPT_BUILD=0
      shift
      ;;
    --distro)
      OPT_DISTRO="$2"
      shift 2
      ;;
    --distro=*)
      OPT_DISTRO="${key/--distro=/}"
      shift
      ;;
    --folder-name)
      OPT_FOLDER="$2"
      shift 2
      ;;
    --folder-name=*)
      OPT_FOLDER="${key/--folder-name=/}"
      shift
      ;;
    --image)
      OPT_IMAGE="$2"
      shift 2
      ;;
    --image=*)
      OPT_IMAGE="${key/--image=/}"
      shift
      ;;
    --keep)
      OPT_RM=0
      shift
      ;;
    --no-keep)
      OPT_RM=1
      shift
      ;;
    --map-user)
      OPT_MAP_USER=1
      shift
      ;;
    --no-map-user)
      OPT_MAP_USER=0
      shift
      ;;
    --run)
      OPT_RUN=1
      shift
      ;;
    --no-run)
      OPT_RUN=0
      shift
      ;;
    --tty)
      OPT_TTY=1
      shift
      ;;
    --no-tty)
      OPT_TTY=0
      shift
      ;;
    --upgrade-dev-env)
      OPT_UPGRADE_DEVENV=1
      shift
      ;;
    --upgrade-dev-env-to)
      OPT_UPGRADE_DEVENV=1
      OPT_UPGRADE_DEVENV_VERSION_TAG="$2"
      shift 2
      ;;
    --upgrade-dev-env-to=*)
      OPT_UPGRADE_DEVENV=1
      OPT_UPGRADE_DEVENV_VERSION_TAG="${key/--upgrade-dev-env-to=/}"
      shift
      ;;
    --)
      shift
      COMMAND=("$@")
      break
      ;;
    --help|-h)
      show_usage
      exit 1
      ;;
    *)
      >&2 echo "Unrecognized option: \"${key}\""
      OPTS_VALID=0
      shift
      ;;
  esac
done

if [[ ${OPTS_VALID} -eq 0 ]]; then
  >&2 show_usage
  exit 1
fi

[[ ${OPT_RM} -eq 1 ]]  && CMD_RM='--rm'   || CMD_RM=''
[[ ${OPT_TTY} -eq 1 ]] && CMD_TTY='--tty' || CMD_TTY=''

########################################################################################################################
# Upgrading dev-env                                                                                                    #
########################################################################################################################

if [[ ${OPT_UPGRADE_DEVENV} -eq 1 ]]; then
  if [[ -z "${OPT_UPGRADE_DEVENV_VERSION_TAG}" ]]; then
    VERSION_TAG=$(upgrade_dev_env_get_latest_version_tag)
  else
    VERSION_TAG="${OPT_UPGRADE_DEVENV_VERSION_TAG}"
  fi

  if [[ "${VERSION_TAG}" == "${DEVENV_BASED_ON}" ]]; then
    >&2 echo "Latest version is ${VERSION_TAG} -- not upgrading, as the version tag is the same"
    exit 0
  else
    >&2 echo "Upgrading from ${DEVENV_BASED_ON} to ${VERSION_TAG}"
  fi

  WORKING_DIR=$(mktemp -d)
  upgrade_dev_env_fetch_script "${DEVENV_BASED_ON}" > "${WORKING_DIR}/dev-env-base"
  upgrade_dev_env_fetch_script "${VERSION_TAG}"     > "${WORKING_DIR}/dev-env-upstream"

  upgrade_dev_env_merge "${WORKING_DIR}/dev-env-base" "$0" "${WORKING_DIR}/dev-env-upstream" "${WORKING_DIR}/dev-env-temp"
  exit 0
fi

########################################################################################################################
# Image Building                                                                                                       #
########################################################################################################################

if [[ -z "${OPT_DISTRO}" ]]; then
  OPT_DISTRO=$(default_distro)
fi

if [[ -z "${OPT_IMAGE}" ]]; then
  IMAGE_NAME=${PROJECT_NAME}/${OPT_DISTRO}/dev
else
  IMAGE_NAME=${OPT_IMAGE}
fi

if [[ ${OPT_BUILD} -eq 1 ]]; then
  DOCKER_DIR=${DOCKER_ROOT}/${OPT_DISTRO}

  if ! [[ -e "${DOCKER_DIR}/Dockerfile" ]]; then
    >&2 echo "No Dockerfile in \"${DOCKER_DIR}\""
    exit 1
  fi

  docker build "${DOCKER_DIR}" -t ${IMAGE_NAME}
fi

########################################################################################################################
# Running                                                                                                              #
########################################################################################################################

if [[ ${OPT_RUN} -eq 1 ]]; then
  CONTAINER_ID=$(docker run                                 \
                 ${CMD_RM}                                  \
                 --detach                                   \
                 --volume="${PROJECT_ROOT}:/${OPT_FOLDER}"  \
                 --workdir "/${OPT_FOLDER}"                 \
                 "${IMAGE_NAME}"                            \
                 sleep infinity                             \
                )
  trap "docker stop -t 0 ${CONTAINER_ID} >/dev/null" EXIT

  if [[ ${OPT_MAP_USER} -eq 1 ]]; then
    GROUP_ID=$(id -g)
    GROUP_NAME=$(id -ng)
    GROUP_NAME_INSIDE=$(docker exec ${CONTAINER_ID} getent group ${GROUP_ID} | cut -d':' -f1 || true)
    if [[ -z "${GROUP_NAME_INSIDE}" ]]; then
      # The container does not have a group with the current user's GID -- create one
      GROUP_NAME_INSIDE="${GROUP_NAME}"
      until docker exec ${CONTAINER_ID} groupadd --gid ${GROUP_ID} "${GROUP_NAME_INSIDE}"; do
        # If creating the group failed, keep adding underscores to the name until it succeeds
        GROUP_NAME_INSIDE="${GROUP_NAME_INSIDE}_"
      done
    fi

    USER_ID=$(id -u)
    USER_NAME=$(id -nu)
    USER_NAME_INSIDE=$(docker exec ${CONTAINER_ID} getent passwd ${USER_ID} | cut -d':' -f1 || true)
    if [[ -z "${USER_NAME_INSIDE}" ]]; then
      # The container does not have a user name with the current user's UID -- create one
      USER_NAME_INSIDE="${USER_NAME}"
      until docker exec ${CONTAINER_ID} useradd -u ${USER_ID} -g ${GROUP_ID} "${USER_NAME_INSIDE}"; do
        # If creating the user failed, keep adding underscores to the name until it succeeds
        USER_NAME_INSIDE="${USER_NAME_INSIDE}_"
      done
    fi

    # Allow sudo without password
    docker exec ${CONTAINER_ID} bash -c "echo '${USER_NAME_INSIDE} ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"

    # It is fairly common for tools to rely on ~, so make sure ~ exists and is owned by the proper user
    docker exec ${CONTAINER_ID} mkdir -p "/home/${USER_NAME_INSIDE}"
    docker exec ${CONTAINER_ID} chown "${USER_NAME_INSIDE}:${GROUP_NAME_INSIDE}" "/home/${USER_NAME_INSIDE}"

    CMD_USER="--user=${USER_ID}:${GROUP_ID}"
  else
    CMD_USER=''
  fi

  docker exec -i ${CMD_TTY} ${CMD_USER} ${CONTAINER_ID} "${COMMAND[@]}"
fi
